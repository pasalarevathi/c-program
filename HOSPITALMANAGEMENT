#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Patient {
    int id;
    char name[50];
    int age;
    char disease[50];
    struct Patient* next; 
} Patient;

Patient* head = NULL;

void addPatient() {
    Patient* newPatient = (Patient*)malloc(sizeof(Patient));
    if (newPatient == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    printf("Enter patient ID: ");
    scanf("%d", &newPatient->id);
    printf("Enter patient name: ");
    scanf(" %[^\n]s", newPatient->name);
    printf("Enter patient age: ");
    scanf("%d", &newPatient->age);
    printf("Enter patient disease: ");
    scanf(" %[^\n]s", newPatient->disease);

    newPatient->next = NULL;

    if (head == NULL) {
        head = newPatient;
    } else {
        Patient* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newPatient;
    }
    printf("Patient added successfully.\n");
}
void displayPatient(int id) {
    Patient* current = head;
    while (current != NULL) {
        if (current->id == id) {
            printf("Patient ID: %d\n", current->id);
            printf("Name: %s\n", current->name);
            printf("Age: %d\n", current->age);
            printf("Disease: %s\n", current->disease);
            return;
        }
        current = current->next;
    }
    printf("Patient with ID %d not found.\n", id);
}

void displayAllPatients() {
    if (head == NULL) {
        printf("No patients recorded yet.\n");
        return;
    }

    printf("\n--- All Patients ---\n");
    Patient* current = head;
    while (current != NULL) {
        displayPatient(current->id);
        printf("------------------\n");
        current = current->next;
    }
}

void searchPatientByName() {
    char searchName[50];
    printf("Enter name to search: ");
    scanf(" %[^\n]s", searchName);

    int found = 0;
    Patient* current = head;
    while (current != NULL) {
        if (strcmp(current->name, searchName) == 0) {
            displayPatient(current->id);
            found = 1;
            printf("------------------\n");
        }
        current = current->next;
    }
    if (!found) {
        printf("No patient found with that name.\n");
    }
}

void deletePatient(int id) {
    Patient* current = head;
    Patient* previous = NULL;

    while (current != NULL) {
        if (current->id == id) {
            if (previous == NULL) {
                head = current->next; // If deleting the head node
            } else {
                previous->next = current->next;
            }
            free(current);
            printf("Patient with ID %d deleted successfully.\n", id);
            return;
        }
        previous = current;
        current = current->next;
    }
    printf("Patient with ID %d not found.\n", id);
}
void freeMemory() {
    Patient* current = head;
    while (current != NULL) {
        Patient* temp = current;
        current = current->next;
        free(temp);
    }
    head = NULL;
}

int main() {
    int choice, patientId;

    do {
        printf("\nHospital Management System\n");
        printf("1. Add Patient\n");
        printf("2. Display Patient Details (by ID)\n");
        printf("3. Display All Patients\n");
        printf("4. Search Patient by Name\n");
        printf("5. Delete Patient\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addPatient();
                break;
            case 2:
                printf("Enter patient ID to display: ");
                scanf("%d", &patientId);
                displayPatient(patientId);
                break;
            case 3:
                displayAllPatients();
                break;
            case 4:
                searchPatientByName();
                break;
            case 5:
                printf("Enter patient ID to delete: ");
                scanf("%d", &patientId);
                deletePatient(patientId);
                break;
            case 6:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);

    freeMemory(); // Free allocated memory before exiting
    return 0;
}
